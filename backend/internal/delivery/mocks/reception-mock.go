// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery/handlers/reception.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	forms "pvz/internal/delivery/forms"
	models "pvz/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockReceptionUseCase is a mock of ReceptionUseCase interface.
type MockReceptionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionUseCaseMockRecorder
}

// MockReceptionUseCaseMockRecorder is the mock recorder for MockReceptionUseCase.
type MockReceptionUseCaseMockRecorder struct {
	mock *MockReceptionUseCase
}

// NewMockReceptionUseCase creates a new mock instance.
func NewMockReceptionUseCase(ctrl *gomock.Controller) *MockReceptionUseCase {
	mock := &MockReceptionUseCase{ctrl: ctrl}
	mock.recorder = &MockReceptionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionUseCase) EXPECT() *MockReceptionUseCaseMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockReceptionUseCase) AddProduct(ctx context.Context, productForm forms.ProductForm) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, productForm)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockReceptionUseCaseMockRecorder) AddProduct(ctx, productForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockReceptionUseCase)(nil).AddProduct), ctx, productForm)
}

// CloseReception mocks base method.
func (m *MockReceptionUseCase) CloseReception(ctx context.Context, pvzId uuid.UUID) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseReception", ctx, pvzId)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseReception indicates an expected call of CloseReception.
func (mr *MockReceptionUseCaseMockRecorder) CloseReception(ctx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseReception", reflect.TypeOf((*MockReceptionUseCase)(nil).CloseReception), ctx, pvzId)
}

// CreateReception mocks base method.
func (m *MockReceptionUseCase) CreateReception(ctx context.Context, receptionForm forms.ReceptionForm) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, receptionForm)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionUseCaseMockRecorder) CreateReception(ctx, receptionForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReceptionUseCase)(nil).CreateReception), ctx, receptionForm)
}

// RemoveProduct mocks base method.
func (m *MockReceptionUseCase) RemoveProduct(ctx context.Context, pvzId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProduct", ctx, pvzId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProduct indicates an expected call of RemoveProduct.
func (mr *MockReceptionUseCaseMockRecorder) RemoveProduct(ctx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProduct", reflect.TypeOf((*MockReceptionUseCase)(nil).RemoveProduct), ctx, pvzId)
}
