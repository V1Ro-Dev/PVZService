// Code generated by MockGen. DO NOT EDIT.
// Source: internal/delivery\handlers\auth-handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	forms "pvz/internal/delivery/forms"
	models "pvz/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthUseCase is a mock of AuthUseCase interface.
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthUseCase.
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mock instance.
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthUseCase) CreateUser(ctx context.Context, signUpForm forms.SignUpFormIn) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, signUpForm)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthUseCaseMockRecorder) CreateUser(ctx, signUpForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthUseCase)(nil).CreateUser), ctx, signUpForm)
}

// DummyLogin mocks base method.
func (m *MockAuthUseCase) DummyLogin(ctx context.Context, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DummyLogin", ctx, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DummyLogin indicates an expected call of DummyLogin.
func (mr *MockAuthUseCaseMockRecorder) DummyLogin(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DummyLogin", reflect.TypeOf((*MockAuthUseCase)(nil).DummyLogin), ctx, role)
}

// IsUserExist mocks base method.
func (m *MockAuthUseCase) IsUserExist(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockAuthUseCaseMockRecorder) IsUserExist(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockAuthUseCase)(nil).IsUserExist), ctx, email)
}

// LogInUser mocks base method.
func (m *MockAuthUseCase) LogInUser(ctx context.Context, logInForm forms.LogInFormIn) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogInUser", ctx, logInForm)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogInUser indicates an expected call of LogInUser.
func (mr *MockAuthUseCaseMockRecorder) LogInUser(ctx, logInForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInUser", reflect.TypeOf((*MockAuthUseCase)(nil).LogInUser), ctx, logInForm)
}
